{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","components/LoginButton.js","components/LogoutButton.js","components/Profile.js","App/App.js","serviceWorker.js","index.js"],"names":["TodoForm","_ref","addTodo","_useState","useState","id","task","completed","_useState2","_slicedToArray","todo","setTodo","React","createElement","className","onSubmit","e","preventDefault","trim","_objectSpread","uuid","TextField","label","type","name","value","onChange","target","Button","Todo","toggleComplete","removeTodo","ListItem","style","display","Checkbox","checked","onClick","Typography","variant","textDecoration","IconButton","CloseIcon","TodoList","todos","isAuthenticated","List","map","key","LoginButton","loginWithRedirect","useAuth0","redirectUri","window","location","origin","indexOf","concat","LogoutButton","logout","logoutParams","returnTo","Profile","_useAuth","user","isLoading","src","picture","alt","email","App","setTodos","useEffect","storageTodos","JSON","parse","localStorage","getItem","setItem","stringify","padding","_toConsumableArray","filter","Boolean","hostname","match","ReactDOM","render","Auth0Provider","domain","clientId","authorizationParams","redirect_uri","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b8d6cff0.chunk.js","sourcesContent":["import { Button, TextField } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport { v4 as uuid } from \"uuid\";\n\nfunction TodoForm({ addTodo }) {\n  const [todo, setTodo] = useState({\n    id: \"\",\n    task: \"\",\n    completed: false\n  });\n\n  function handleTaskInputChange(e) {\n    // e.target.value contains new input from onChange\n    // event for input elements\n    setTodo({ ...todo, task: e.target.value });\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault(); // prevents browser refresh\n    // trim() gets rid of string whitespace\n    if (todo.task.trim()) {\n      addTodo({ ...todo, id: uuid() });\n      setTodo({ ...todo, task: \"\" });\n    }\n  }\n\n  return (\n    <form className=\"todo-form\" onSubmit={handleSubmit}>\n      <TextField\n        label=\"Task\"\n        type=\"text\"\n        name=\"task\"\n        value={todo.task}\n        onChange={handleTaskInputChange}\n      />\n      <Button type=\"submit\">Submit</Button>\n    </form>\n  );\n}\n\nexport default TodoForm;","import { Checkbox, IconButton, ListItem, Typography } from \"@material-ui/core\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport React from \"react\";\n\nfunction Todo({ todo, toggleComplete, removeTodo }) {\n  function handleCheckboxClick() {\n    toggleComplete(todo.id);\n  }\n\n  function handleRemoveClick() {\n    removeTodo(todo.id);\n  }\n\n  return (\n    <ListItem style={{ display: \"flex\" }}>\n      <Checkbox checked={todo.completed} onClick={handleCheckboxClick} />\n      <Typography\n        variant=\"body1\"\n        style={{\n          textDecoration: todo.completed ? \"line-through\" : null\n        }}\n      >\n        {todo.task}\n      </Typography>\n      <IconButton onClick={handleRemoveClick}>\n        <CloseIcon />\n      </IconButton>\n    </ListItem>\n  );\n}\n\nexport default Todo;","import { List } from \"@material-ui/core\";\nimport React from \"react\";\nimport Todo from \"./Todo\";\n\nfunction TodoList({ todos, removeTodo, toggleComplete, isAuthenticated }) {  \n  return (\n    <List>\n      {todos.map(todo => (\n        <Todo\n          key={todo.id}\n          todo={todo}\n          removeTodo={removeTodo}\n          toggleComplete={toggleComplete}\n        />\n      ))}\n    </List>\n  );\n}\n\nexport default TodoList;","import React from \"react\";\nimport { Button } from \"@material-ui/core\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\n\nconst LoginButton = () => {\n  const { loginWithRedirect } = useAuth0();\n\n  return <Button variant=\"contained\" onClick={() => loginWithRedirect()}>Log In</Button>;\n};\n\nexport default LoginButton;","import React from \"react\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\nimport { Button } from \"@material-ui/core\";\n\nconst redirectUri = window.location.origin.indexOf(\"localhost\") !== -1 ? window.location.origin : `${window.location.origin}/codehooks-io-react-todo`;\n\nconst LogoutButton = () => {\n  const { logout } = useAuth0();\n\n  return (\n    <Button variant=\"contained\" onClick={() => logout({ logoutParams: { returnTo: redirectUri } })}>\n      Log Out\n    </Button>\n  );\n};\n\nexport default LogoutButton;","import React from \"react\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\n\nconst Profile = () => {\n  const { user, isAuthenticated, isLoading } = useAuth0();\n\n  if (isLoading) {\n    return <div>Loading ...</div>;\n  }\n\n  return (\n    isAuthenticated && (\n      <div>\n        <img src={user.picture} alt={user.name} />\n        <h2>{user.name}</h2>\n        <p>{user.email}</p>\n      </div>\n    )\n  );\n};\n\nexport default Profile;","import Typography from \"@material-ui/core/Typography\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport TodoForm from \"../components/TodoForm\";\nimport TodoList from \"../components/TodoList\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\nimport LoginButton from \"../components/LoginButton\";\nimport LogoutButton from \"../components/LogoutButton\";\nimport Profile from \"../components/Profile\";\n\nconst LOCAL_STORAGE_KEY = \"react-todo-list-todos\";\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const { user, isAuthenticated, isLoading } = useAuth0();\n\n  useEffect(() => {\n    // fires when app component mounts to the DOM\n    const storageTodos = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n    if (storageTodos) {\n      setTodos(storageTodos);\n    }\n  }, []);\n\n  useEffect(() => {\n    // fires when todos array gets updated\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(todos));\n  }, [todos]);\n\n  function addTodo(todo) {\n    // adds new todo to beginning of todos array\n    setTodos([todo, ...todos]);\n  }\n\n  function toggleComplete(id) {\n    setTodos(\n      todos.map(todo => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            completed: !todo.completed\n          };\n        }\n        return todo;\n      })\n    );\n  }\n\n  function removeTodo(id) {\n    setTodos(todos.filter(todo => todo.id !== id));\n  }\n\n  return (\n    <div className=\"App\">\n      <Typography style={{ padding: 10 }} variant=\"h2\">\n        React Todo\n      </Typography>\n      <Typography style={{ padding: 10 }} variant=\"subtitle1\">\n        Auth0.com authentication - Codehooks.io API Backend\n      </Typography>\n      <div style={{ padding: 10 }}>\n        {isAuthenticated ? '' : <LoginButton />}\n        {isAuthenticated ? <LogoutButton /> : ''}\n      </div>\n      <Profile />\n      <TodoForm addTodo={addTodo} />\n      <TodoList\n        todos={isAuthenticated ? todos : []}\n        removeTodo={removeTodo}\n        toggleComplete={toggleComplete}\n        isAuthenticated={isAuthenticated}\n      />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Auth0Provider } from \"@auth0/auth0-react\";\n\n// hack to make it work with subdirectory for deployment on github pages\nconst redirectUri = window.location.origin.indexOf(\"localhost\") !== -1 ? window.location.origin : `${window.location.origin}/codehooks-io-react-todo`;\n\nReactDOM.render(\n    <Auth0Provider\n      domain=\"dev-nofd3nl3.us.auth0.com\"\n      clientId=\"NvtGSUYq2BFxX3L5kRnHFl6O6xALqt5y\"\n      authorizationParams={{\n        redirect_uri: redirectUri\n      }}\n    >\n      <App />\n    </Auth0Provider>,\n    document.getElementById(\"root\")\n  );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}